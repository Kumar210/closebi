"""init

Revision ID: 25aea62c09c7
Revises: 
Create Date: 2024-11-11 15:05:02.178508
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision: str = '25aea62c09c7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(None, 'call_log', ['id'])
    op.create_unique_constraint(None, 'ga_log', ['id'])
    op.create_unique_constraint(None, 'gcb', ['id'])
    op.create_unique_constraint(None, 'invoice_log', ['id'])
    op.create_unique_constraint(None, 'master_data', ['id'])
    op.create_unique_constraint(None, 'sc_log', ['id'])
    op.add_column('users', sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.create_unique_constraint(None, 'users', ['id'])
    # ### end Alembic commands ###



def downgrade() -> None:
    # Avoid dropping non-existing constraints
    conn = op.get_bind()
    result = conn.execute(text("SELECT conname FROM pg_constraint WHERE conname = 'uq_users_id'"))
    if result.fetchone():
        op.drop_constraint('uq_users_id', 'users', type_='unique')
    
    # Drop other constraints with actual names
    op.drop_constraint('uq_sc_log_constraint_name', 'sc_log', type_='unique')
    op.drop_constraint('uq_master_data_constraint_name', 'master_data', type_='unique')
    op.drop_constraint('uq_invoice_log_constraint_name', 'invoice_log', type_='unique')
    op.drop_constraint('uq_gcb_constraint_name', 'gcb', type_='unique')
    op.drop_constraint('uq_ga_log_constraint_name', 'ga_log', type_='unique')
    op.drop_constraint('uq_call_log_constraint_name', 'call_log', type_='unique')
    
    # Now drop the column
    op.drop_column('users', 'password')


